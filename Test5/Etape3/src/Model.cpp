#include "Model.h"
namespace carconfig
{
	/***********************************************************************************************************************************************/
	/************************************					CONSTRUCTEURS/DESTRUCTEURS						****************************************/
	/***********************************************************************************************************************************************/
	Model::Model()
	{
		power = 0;
		basePrice = 0;
		name = nullptr;
		engine = Petrol; 

	}
	Model::Model(const char* nom, int puissance, Engine moteur, float prix)
	{
		power = puissance;	// setPower(puissance);
		engine = moteur;	// setEngine(moteur);
		name = new char[strlen(nom) + 1];
		strcpy(name, nom);	// setName(nom);
		basePrice = prix;	// setPrice(prix);
	}
	/***********************************************************************************************************************************************/
	/************************************					OPERATEURS						********************************************************/
	/***********************************************************************************************************************************************/
	istream& operator>>(istream& s, Model& m)
	{
		int temp;
	    char nom[100];

	    cout << "Nom: ";
	    s.getline(nom, 100);

	    cout << "Engine: ";
	    s >> temp;
	    m.engine = static_cast<Engine>(temp);

	    cout << "Puissance: ";
	    s >> m.power;
	    cout << "Prix: ";
	    s >> m.basePrice;
	    s.ignore();

	    // lib√©ration de l'ancien name
	    delete[] m.name;
	    m.name = new char[strlen(nom) + 1];
	    strcpy(m.name, nom);
		return s;
	}
	ostream& operator<<(ostream& s, const Model& m)
	{
		s << "Nom: " << m.name << endl;
		s << "Puissance: " << m.power << " Prix de base :" << m.basePrice << endl;
		s << "Moteur: ";
		switch(m.engine)
		{
			case Petrol:
				s << "Petrol";
				break;
			case Diesel:
				s << "Diesel";
				break;
			case Electric:
				s << "Electric";
				break;
			case Hybrid:
				s << "Hybrid";
				break;
		}
		s << endl;
		return s;
	}




	/***********************************************************************************************************************************************/
	/************************************					AUTRES FONCTIONS						************************************************/
	/***********************************************************************************************************************************************/

	/***********************************************************************************************************************************************/
	/************************************					DISPLAY						************************************************************/
	/***********************************************************************************************************************************************/
	void Model::display() const
	{
		cout << "Nom: " << name << endl;
		cout << "Puissance: " << power << " Prix de base :" << basePrice << endl;
		cout<< "Moteur: ";
		switch(engine)
		{
			case Petrol:
				cout << "Petrol";
				break;
			case Diesel:
				cout << "Diesel";
				break;
			case Electric:
				cout << "Electric";
				break;
			case Hybrid:
				cout << "Hybrid";
				break;
		}
		cout<< endl;
	}
	/***********************************************************************************************************************************************/
	/************************************					SETTERS						************************************************************/
	/***********************************************************************************************************************************************/



	/***********************************************************************************************************************************************/
	/************************************					GETTERS						************************************************************/
	/***********************************************************************************************************************************************/
	float Model::getBasePrice() const
	{
		return basePrice;
	}
}
